/* Copyright (c) 2021 Haltian Oy

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'dart:convert';

import 'package:thingsee_installer/app_localizations.dart';
import 'package:thingsee_installer/data_classes.dart';
import 'package:thingsee_installer/utilities.dart';
import 'package:thingsee_installer/thingsee_network_apis.dart';
import 'package:thingsee_installer/message_list_view.dart';
import 'package:thingsee_installer/deploy_or_edit_device_screen.dart';

import 'package:modal_progress_hud/modal_progress_hud.dart';
import 'package:barcode_scan/barcode_scan.dart';
import 'package:permission_handler/permission_handler.dart';

class CheckDeviceSensorScreen extends StatefulWidget {
  CheckDeviceSensorScreen({Key key, this.tuid}) : super(key: key);
  final String tuid;

  @override
  _CheckDeviceSensorScreenState createState() =>
      _CheckDeviceSensorScreenState(tuid);
}

class _CheckDeviceSensorScreenState extends State<CheckDeviceSensorScreen> {
  var _scaffoldKey = new GlobalKey<ScaffoldState>();
  bool _loading = true;
  bool _loaded = false;
  // Sensor information
  String tuid = "-";
  String installationStatus = "-";
  String battLevel = "-";
  String deviceType = "-";
  SensorType sensorType = SensorType.sensorTypeUnknown;

  String groupId;

  AutogeneratedMessageData messages;

  String _secondTuid;

  _CheckDeviceSensorScreenState(String tuid) {
    this.tuid = tuid;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
        onWillPop: () {
          Navigator.pop(context, false);
          return Future.value(false); // if true allow back else block it
        },
        child: Scaffold(
          key: _scaffoldKey,
          appBar: AppBar(
            backgroundColor: HexColor("#1f87d8"),
            leading: IconButton(
              icon: new SvgPicture.asset(
                'assets/ts_arrow.svg',
                color: HexColor("#ffffff"),
              ),
              onPressed: () {
                Navigator.pop(context, false);
              },
            ),
            title: Text(
              AppLocalizations.of(context).translate('device_info_title'),
              style: TextStyle(fontFamily: 'Haltian Sans'),
            ),
            actions: <Widget>[
              SizedBox(
                  width: 60,
                  child: Container(
                      child: IconButton(
                        icon: Image(
                          image: AssetImage('assets/ts_edit_menu_black.png'),
                          color: HexColor("#ffffff"),
                        ),
                        onPressed: _menuSelected,
                      )))
            ],
          ),
          body:
              ModalProgressHUD(child: _contentWidget(), inAsyncCall: _loading),
          endDrawer: _deviceMenu(),
        ));
  }

  _menuSelected() {
    _scaffoldKey.currentState.openEndDrawer();
  }

  _contentWidget() {
    if (_loaded) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Padding(
              padding: EdgeInsets.fromLTRB(4, 25, 0, 0),
              child: Row(
                children: <Widget>[
                  Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        Container(
                          child: SizedBox(
                            width: 110,
                            height: 110,
                            child: Image(image: getSensorImage(tuid)),
                          ),
                        ),
                        Row(children: <Widget>[
                          Container(
                            child: SizedBox(
                              width: 25,
                              height: 60,
                              child: Image(
                                  image: AssetImage('assets/ts_battery_100.png')),
                            ),
                          ),
                          Text(
                            battLevel + '%',
                            style: TextStyle(
                                fontFamily: 'Haltian Sans',
                                fontSize: 26,
                                fontWeight: FontWeight.bold),
                          ),
                        ]),
                      ]),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      Text(
                        AppLocalizations.of(context)
                            .translate('activator_sensor_tuid'),
                        style: TextStyle(
                            fontFamily: 'Haltian Sans',
                            fontSize: 20,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        tuid,
                        style:
                            TextStyle(fontFamily: 'Haltian Sans', fontSize: 20),
                      ),
                      Padding(
                        padding: EdgeInsets.fromLTRB(0, 5, 0, 0),
                      ),
                      Text(
                        AppLocalizations.of(context)
                            .translate('activator_sensor_type'),
                        style: TextStyle(
                            fontFamily: 'Haltian Sans',
                            fontSize: 20,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        getSensorName(sensorType),
                        style:
                            TextStyle(fontFamily: 'Haltian Sans', fontSize: 20),
                      ),
                      Padding(
                        padding: EdgeInsets.fromLTRB(0, 5, 0, 0),
                      ),
                      Text(
                        AppLocalizations.of(context)
                            .translate('activator_sensor_installation_status'),
                        style: TextStyle(
                            fontFamily: 'Haltian Sans',
                            fontSize: 20,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        installationStatus,
                        style:
                            TextStyle(fontFamily: 'Haltian Sans', fontSize: 20),
                      ),
                      Padding(
                        padding: EdgeInsets.fromLTRB(0, 5, 0, 0),
                      ),
                      Text(
                        AppLocalizations.of(context)
                            .translate('activator_sensor_deployment_group'),
                        style: TextStyle(
                            fontFamily: 'Haltian Sans',
                            fontSize: 20,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        groupId,
                        style:
                        TextStyle(fontFamily: 'Haltian Sans', fontSize: 20),
                      ),
                      Padding(
                        padding: EdgeInsets.fromLTRB(0, 5, 0, 0),
                      ),
                    ],
                  )
                ],
              )),
          Divider(
            color: Colors.grey,
          ),
          Padding(
            padding: EdgeInsets.fromLTRB(20, 5, 0, 0),
            child: Text(
              AppLocalizations.of(context)
                  .translate('activator_sensor_message_list'),
              style: TextStyle(
                  fontFamily: 'Haltian Sans',
                  fontSize: 20,
                  fontWeight: FontWeight.bold),
            ),
          ),
          _deviceMessages(),
        ],
      );
    } else {
      return Container(
        color: HexColor("#ffffff"),
        constraints: BoxConstraints.expand(),
        child: Align(alignment: Alignment.center, child: _loadThingInfo()),
      );
    }
  }

  _deviceMenu() {
    return Align(
      alignment: Alignment.topRight,
      child: Padding(
        padding: EdgeInsets.fromLTRB(0, 30, 0, 0),
        child: SizedBox(
          width: 130,
          height: 210,
          child: Container(
            color: HexColor("#1f87d8"),
            child: ListView(
              // Important: Remove any padding from the ListView.
              padding: EdgeInsets.fromLTRB(10, 30, 0, 0),
              children: <Widget>[
                SizedBox(
                  height: 70,
                  width: 100,
                  child: GestureDetector(
                    onTap: () {
                      Navigator.pop(context);
                      _editDevice();
                    },
                    child: Text(
                      AppLocalizations.of(context)
                          .translate('device_menu_item_edit'),
                      style: TextStyle(
                          fontFamily: 'Haltian Sans',
                          fontSize: 16,
                          color: HexColor("#ffffff"),
                          fontStyle: FontStyle.normal,
                          decoration: TextDecoration.none),
                    ),
                  ),
                ),
                SizedBox(
                  height: 70,
                  width: 100,
                  child: GestureDetector(
                    onTap: () {
                      Navigator.pop(context);
                      _removeDevice();
                    },
                    child: Text(
                      AppLocalizations.of(context)
                          .translate('device_menu_item_remove'),
                      style: TextStyle(
                          fontFamily: 'Haltian Sans',
                          fontSize: 16,
                          color: HexColor("#ffffff"),
                          fontStyle: FontStyle.normal,
                          decoration: TextDecoration.none),
                    ),
                  ),
                ),
                SizedBox(
                  height: 70,
                  width: 100,
                  child: GestureDetector(
                    onTap: () {
                      Navigator.pop(context);
                      _replaceDevice();
                    },
                    child: Text(
                      AppLocalizations.of(context)
                          .translate('device_menu_item_replace'),
                      style: TextStyle(
                          fontFamily: 'Haltian Sans',
                          fontSize: 16,
                          color: HexColor("#ffffff"),
                          fontStyle: FontStyle.normal,
                          decoration: TextDecoration.none),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  _editDevice() async {
    bool refresh = await Navigator.push(
      context,
      MaterialPageRoute(
          builder: (context) => DeployOrEditDeviceScreen(
                tuid: tuid,
                groupid: null,
              )),
    );
    if (refresh) {
      setState(() {
        _loading = true;
        _loaded = false;
      });
    }
  }

  _removeDevice() {
    print("_removeDevice");
    showQueryDialog(
        context,
        AppLocalizations.of(context).translate('remove_title'),
        AppLocalizations.of(context)
            .translate('confirmation_query_remove_device_from_group'),
        AppLocalizations.of(context).translate('button_remove'),
        AppLocalizations.of(context).translate('button_cancel'),
        _removeDeviceFromGroup,
        _doNothing);
  }

  _removeDeviceFromGroup() async {
    setState(() {
      _loading = true;
    });
    Map<String, dynamic> response =
        await ThingseeNetworkAPIs.nwSetDeviceDeploymentGroup(
            tuid, 'unassigned');
    if (response["responseCode"] == 200) {
      Navigator.pop(context, true);
    } else {
      showSimpleQueryDialog(
          context,
          AppLocalizations.of(context).translate('error_title'),
          AppLocalizations.of(context)
              .translate('error_message_something_went_wrong'),
          AppLocalizations.of(context).translate('button_close'),
          _doNothing);
    }
  }

  _doNothing() {}

  _replaceDevice() {
    print("_replaceDevice");
    showQueryDialog(
        context,
        AppLocalizations.of(context).translate('replace_title'),
        AppLocalizations.of(context)
            .translate('confirmation_query_replace_device_with_new_device'),
        AppLocalizations.of(context).translate('button_replace'),
        AppLocalizations.of(context).translate('button_cancel'),
        _scanNewDevice,
        _doNothing);
  }

  _scanNewDevice() {
    _checkPermission();
  }

  _deviceMessages() {
    return Expanded(
        child: Padding(
            padding: EdgeInsets.fromLTRB(20, 0, 0, 0),
            child: MessagesListView(messages)));
  }

  _loadThingInfo() {
    ThingseeNetworkAPIs.nwCheckDeviceInfoAndState(tuid).then(_thingInfoLoaded);
  }

  _thingInfoLoaded(DeviceInfo deviceInfo) {
    print(deviceInfo.toString());
    if (deviceInfo.error.isEmpty) {
      battLevel = deviceInfo.battLvl;
      if (deviceInfo.battLvl.isEmpty) battLevel = "-";
      sensorType = getSensorType(deviceInfo.tuid);
      _loadThingInstallationInfo(deviceInfo);
    } else if (deviceInfo.error.contains("404")) {
      //Sensor not found from this stack
      Navigator.pop(context, true);
    } else {
      showSimpleQueryDialog(
          context,
          AppLocalizations.of(context).translate('error_title'),
          AppLocalizations.of(context)
              .translate('error_message_something_went_wrong'),
          AppLocalizations.of(context).translate('button_close'),
          _popOutFromWidget);
    }
  }

  _popOutFromWidget() {
    Navigator.pop(context, false);
  }

  _loadThingInstallationInfo(DeviceInfo deviceInfo) {
    ThingseeNetworkAPIs.nwGetDeviceInstallationStatus(deviceInfo)
        .then(_thingInstallationInfoLoaded);
  }

  _thingInstallationInfoLoaded(DeviceInfo deviceInfo) {
    print(deviceInfo.toString());
    if (deviceInfo.error.isEmpty) {
      if (deviceInfo.installationStatus == "installed") {
        installationStatus = AppLocalizations.of(context)
            .translate('activator_installation_status_installed');
      } else if (deviceInfo.installationStatus == "new") {
        installationStatus = AppLocalizations.of(context)
            .translate('activator_installation_status_new');
      } else if (deviceInfo.installationStatus == "quarantine") {
        installationStatus = AppLocalizations.of(context)
            .translate('activator_installation_status_quarantine');
      } else if (deviceInfo.installationStatus == "retired") {
        installationStatus = AppLocalizations.of(context)
            .translate('activator_installation_status_retired');
      } else {
        installationStatus = AppLocalizations.of(context)
            .translate('activator_installation_status_uninstalled');
      }
      ThingseeNetworkAPIs.nwGetDeviceMessages(deviceInfo.tuid, 50)
          .then(_thingMessagesLoaded);
    } else if (deviceInfo.error.contains("404")) {
      //Sensor not found from this stack
      Navigator.pop(context, true);
    } else {
      showSimpleQueryDialog(
          context,
          AppLocalizations.of(context).translate('error_title'),
          AppLocalizations.of(context)
              .translate('error_message_something_went_wrong'),
          AppLocalizations.of(context).translate('button_close'),
          _popOutFromWidget);
    }
  }

  _thingMessagesLoaded(Map<String, dynamic> response) async {
    if (response["responseCode"] == 200) {
      messages = AutogeneratedMessageData.fromJson(response["responseBody"]);
    }
    response = await ThingseeNetworkAPIs.nwGetDeviceDeploymentGroup(tuid);
    if (response["responseCode"] == 200) {
      var bodyAsJson = json.decode(response["responseBody"]);
      var data = bodyAsJson['data'];
      groupId = data['group_id'];
    } else if (response["responseCode"] == 404) {
      //Sensor not found from this stack
      Navigator.pop(context, true);
    } else {
      showSimpleQueryDialog(
          context,
          AppLocalizations.of(context).translate('error_title'),
          AppLocalizations.of(context)
              .translate('error_message_something_went_wrong'),
          AppLocalizations.of(context).translate('button_close'),
          _popOutFromWidget);
    }
    setState(() {
      _loaded = true;
      _loading = false;
    });
  }

  _checkPermission() async {
    if (await Permission.camera.status != PermissionStatus.granted) {
      _requestPermission();
    } else {
      _scan();
    }
  }

  _requestPermission() async {
    if (await Permission.camera.request().isGranted) {
      _scan();
    } else {
      showInfoDialog(
          context,
          AppLocalizations.of(context).translate('error_title'),
          AppLocalizations.of(context)
              .translate('error_message_camera_permission_not_granted'),
          AppLocalizations.of(context).translate('button_close'));
    }
  }

  Future _scan() async {
    try {
      var barcode = await BarcodeScanner.scan();
      String _qrCode = barcode.rawContent;
      List<String> tuidParts = _qrCode.split(',');
      if (tuidParts.length > 1 &&
          tuidParts[0].length == 11 &&
          tuidParts[1].length == 6) {
        _secondTuid = tuidParts[1] + tuidParts[0];
        if (_secondTuid == tuid) {
          showInfoDialog(
              context,
              AppLocalizations.of(context).translate('error_title'),
              AppLocalizations.of(context)
                  .translate('error_message_same_device'),
              AppLocalizations.of(context).translate('button_close'));
        } else {
          setState(() {
            _loading = true;
          });
          ThingseeNetworkAPIs.nwCheckDeviceInfoAndState(_secondTuid)
              .then(_secondThingInfoLoaded);
        }
      } else {
        showInfoDialog(
            context,
            AppLocalizations.of(context).translate('error_title'),
            AppLocalizations.of(context)
                .translate('error_message_invalid_qr_code'),
            AppLocalizations.of(context).translate('button_close'));
      }
    } on PlatformException catch (e) {
      if (e.code == BarcodeScanner.cameraAccessDenied) {
        setState(() {
          showInfoDialog(
              context,
              AppLocalizations.of(context).translate('error_title'),
              AppLocalizations.of(context)
                  .translate('error_message_camera_permission_not_granted'),
              AppLocalizations.of(context).translate('button_close'));
        });
      } else {
        showInfoDialog(
            context,
            AppLocalizations.of(context).translate('error_title'),
            AppLocalizations.of(context)
                .translate('error_message_something_went_wrong'),
            AppLocalizations.of(context).translate('button_close'));
      }
    } on FormatException {
      print("User returned using the 'back'-button before scanning anything.");
    } catch (e) {
      _error();
    }
  }

  _secondThingInfoLoaded(DeviceInfo deviceInfo) {
    print(deviceInfo.toString());
    if (deviceInfo.error.isEmpty) {
      SensorType secondSensorType = getSensorType(_secondTuid);
      showQueryDialog(
          context,
          AppLocalizations.of(context).translate('replace_title'),
          AppLocalizations.of(context).translate(
                  'confirmation_query_replace_current_device_with_this_device') +
              getSensorName(secondSensorType) +
              " / " +
              _secondTuid +
              " ?",
          AppLocalizations.of(context).translate('button_replace'),
          AppLocalizations.of(context).translate('button_cancel'),
          _finalizeReplacement,
          _doNothing);
    } else if (deviceInfo.error.contains("404")) {
      //Sensor not found from this stack
      showInfoDialog(
          context,
          AppLocalizations.of(context).translate('note_title'),
          AppLocalizations.of(context)
                  .translate('note_message_sensor_not_in_stack') +
              _secondTuid,
          AppLocalizations.of(context).translate('button_ok'));
    } else {
      _error();
    }
  }

  _finalizeReplacement() async {
    var result = await ThingseeNetworkAPIs.nwSetDeviceInstallationStatus(
        _secondTuid, "installed");
    print("Response code: " + result["responseCode"].toString());
    if (result["responseCode"] == 200) {
      Map<String, dynamic> response =
          await ThingseeNetworkAPIs.nwGetDeviceDeploymentGroup(tuid);
      if (response["responseCode"] == 200) {
        var bodyAsJson = json.decode(response["responseBody"]);
        var data = bodyAsJson['data'];
        String groupId = data['group_id'];
        response = await ThingseeNetworkAPIs.nwSetDeviceDeploymentGroup(
            _secondTuid, groupId);
        if (response["responseCode"] == 200) {
          await ThingseeNetworkAPIs.nwSetDeviceInstallationStatus(
              tuid, "uninstalled");
          if (response["responseCode"] == 200) {
            showSimpleQueryDialog(
                context,
                AppLocalizations.of(context).translate('note_title'),
                AppLocalizations.of(context)
                    .translate('note_message_sensor_replaced'),
                AppLocalizations.of(context).translate('button_ok'),
                _reloadThingInfo);
          } else {
            _error();
          }
        } else {
          _error();
        }
      } else {
        _error();
      }
    } else {
      _error();
    }
  }

  _reloadThingInfo() {
    setState(() {
      tuid = _secondTuid;
      _secondTuid = "";
      _loaded = false;
      _loading = true;
    });
  }

  _error() {
    showSimpleQueryDialog(
        context,
        AppLocalizations.of(context).translate('error_title'),
        AppLocalizations.of(context)
            .translate('error_message_something_went_wrong'),
        AppLocalizations.of(context).translate('button_close'),
        _doNothing);
  }
}
