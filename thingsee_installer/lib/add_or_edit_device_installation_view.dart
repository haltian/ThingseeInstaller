/* Copyright (c) 2021 Haltian Oy

 Permission is hereby granted, free of charge, to any person obtaining
 a copy of this software and associated documentation files (the
 "Software"), to deal in the Software without restriction, including
 without limitation the rights to use, copy, modify, merge, publish,
 distribute, sublicense, and/or sell copies of the Software, and to
 permit persons to whom the Software is furnished to do so, subject to
 the following conditions:

 The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */

import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';

import 'package:thingsee_installer/app_localizations.dart';
import 'package:thingsee_installer/data_classes.dart';
import 'package:thingsee_installer/utilities.dart';
import 'package:thingsee_installer/thingsee_network_apis.dart';
import 'package:thingsee_installer/message_list_view.dart';

import 'package:modal_progress_hud/modal_progress_hud.dart';

class AddOrEditDeviceInstallationScreen extends StatefulWidget {
  AddOrEditDeviceInstallationScreen(
      {Key key, this.device, this.groupId, this.edit})
      : super(key: key);
  final Device device;
  final String groupId;
  final bool edit;

  @override
  _AddOrEditDeviceInstallationScreenState createState() =>
      _AddOrEditDeviceInstallationScreenState(device, groupId, edit);
}

class _AddOrEditDeviceInstallationScreenState
    extends State<AddOrEditDeviceInstallationScreen> {
  var _scaffoldKey = new GlobalKey<ScaffoldState>();
  bool _loading = true;
  bool _loaded = false;
  // Sensor information
  Device device;
  String groupId;

  List<String> _status = [];
  String installationStatus;
  bool edit;
  AutogeneratedMessageData messages;

  final controllerForDesc = TextEditingController();

  _AddOrEditDeviceInstallationScreenState(
      Device device, String groupId, bool edit) {
    this.device = device;
    this.groupId = groupId;
    this.edit = edit;
    controllerForDesc.text = device.description;
  }

  @override
  Widget build(BuildContext context) {
    if (_status.isEmpty) {
      _status.add(AppLocalizations.of(context)
          .translate('activator_installation_status_installed'));
      _status.add(AppLocalizations.of(context)
          .translate('activator_installation_status_new'));
      _status.add(AppLocalizations.of(context)
          .translate('activator_installation_status_quarantine'));
      _status.add(AppLocalizations.of(context)
          .translate('activator_installation_status_retired'));
      _status.add(AppLocalizations.of(context)
          .translate('activator_installation_status_uninstalled'));
    }

    return WillPopScope(
        onWillPop: () {
          Navigator.pop(context, device);
          return Future.value(false); // if true allow back else block it
        },
        child: Scaffold(
          key: _scaffoldKey,
          appBar: AppBar(
            backgroundColor: HexColor("#1f87d8"),
            leading: IconButton(
              icon: new SvgPicture.asset(
                'assets/ts_arrow.svg',
                color: HexColor("#ffffff"),
              ),
              onPressed: () {
                if (edit)
                  Navigator.pop(context, device);
                else
                  Navigator.pop(context, null);
              },
            ),
            title: Text(
              AppLocalizations.of(context)
                  .translate('activator_sensor_view_title'),
              style: TextStyle(fontFamily: 'Haltian Sans'),
            ),
            actions: <Widget>[
              _menuWidget(),
            ],
          ),
          body:
              ModalProgressHUD(child: _contentWidget(), inAsyncCall: _loading),
          endDrawer: _deviceInstallationViewMenu(),
        ));
  }

  _menuWidget() {
    if (!edit) {
      return SizedBox(width: 60, child: Container());
    } else {
      return SizedBox(
          width: 60,
          child: Container(
              child: IconButton(
                icon: Image(
                  image: AssetImage('assets/ts_edit_menu_black.png'),
                  color: HexColor("#ffffff"),
                ),
                onPressed: _menuSelected,
              )));
    }
  }

  @override
  void dispose() {
    // Clean up the controller when the widget is disposed.
    controllerForDesc.dispose();
    super.dispose();
  }

  _menuSelected() {
    _scaffoldKey.currentState.openEndDrawer();
  }

  _deviceInstallationViewMenu() {
    return Align(
      alignment: Alignment.topRight,
      child: Padding(
        padding: EdgeInsets.fromLTRB(0, 30, 0, 0),
        child: SizedBox(
          width: 130,
          height: 70,
          child: Container(
            color: HexColor("#1f87d8"),
            child: ListView(
              // Important: Remove any padding from the ListView.
              padding: EdgeInsets.fromLTRB(10, 30, 0, 0),
              children: <Widget>[
                SizedBox(
                  height: 70,
                  width: 100,
                  child: GestureDetector(
                    onTap: () {
                      Navigator.pop(context);
                      _removeDeviceFromInstallation();
                    },
                    child: Text(
                      AppLocalizations.of(context)
                          .translate('device_installation_menu_item_remove'),
                      style: TextStyle(
                          fontFamily: 'Haltian Sans',
                          fontSize: 16,
                          color: HexColor("#ffffff"),
                          fontStyle: FontStyle.normal,
                          decoration: TextDecoration.none),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  _removeDeviceFromInstallation() {
    showQueryDialog(
        context,
        AppLocalizations.of(context).translate('remove_title'),
        AppLocalizations.of(context)
            .translate('confirmation_query_remove_device_from_installation'),
        AppLocalizations.of(context).translate('button_remove'),
        AppLocalizations.of(context).translate('button_cancel'),
        _removeDevice,
        _doNothing);
  }

  _removeDevice() async {
    print("Remove device");
    setState(() {
      _loaded = true;
      _loading = true;
    });
    Map<String, dynamic> response =
        await ThingseeNetworkAPIs.nwSetDeviceDeploymentGroup(
            device.tuid, "unassigned");
    if (response["responseCode"] == 200) {
      await ThingseeNetworkAPIs.nwSetDeviceInstallationStatus(
          device.tuid, "uninstalled");
      if (response["responseCode"] == 200) {
        Navigator.pop(
            context, null); //Removes device from the saved installation
      } else {
        setState(() {
          _loaded = true;
          _loading = false;
        });
        _somethingWentWrong();
      }
    } else {
      setState(() {
        _loaded = true;
        _loading = false;
      });
      _somethingWentWrong();
    }
  }

  _doNothing() {}

  _contentWidget() {
    if (_loaded) {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Padding(
              padding: EdgeInsets.fromLTRB(4, 25, 0, 0),
              child: Row(
                children: <Widget>[
                  Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: <Widget>[
                        Container(
                          child: SizedBox(
                            width: 110,
                            height: 100,
                            child: Image(image: getSensorImage(device.tuid)),
                          ),
                        ),
                        Row(children: <Widget>[
                          Container(
                            child: SizedBox(
                              width: 25,
                              height: 60,
                              child: Image(
                                  image: AssetImage('assets/ts_battery_100.png')),
                            ),
                          ),
                          Text(
                            device.battLvl + '%',
                            style: TextStyle(
                                fontFamily: 'Haltian Sans',
                                fontSize: 26,
                                fontWeight: FontWeight.bold),
                          ),
                        ]),
                      ]),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      Text(
                        AppLocalizations.of(context)
                            .translate('activator_sensor_tuid'),
                        style: TextStyle(
                            fontFamily: 'Haltian Sans',
                            fontSize: 20,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        device.tuid,
                        style:
                            TextStyle(fontFamily: 'Haltian Sans', fontSize: 20),
                      ),
                      Padding(
                        padding: EdgeInsets.fromLTRB(0, 5, 0, 0),
                      ),
                      Text(
                        AppLocalizations.of(context)
                            .translate('activator_sensor_type'),
                        style: TextStyle(
                            fontFamily: 'Haltian Sans',
                            fontSize: 20,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        getSensorName(device.deviceType),
                        style:
                            TextStyle(fontFamily: 'Haltian Sans', fontSize: 20),
                      ),
                      Padding(
                        padding: EdgeInsets.fromLTRB(0, 5, 0, 0),
                      ),
                    ],
                  )
                ],
              )),
          Padding(
            padding: EdgeInsets.fromLTRB(20, 0, 0, 0),
            child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Text(
                    AppLocalizations.of(context).translate(
                        'activator_sensor_installation_status_edit_title'),
                    style: TextStyle(
                        fontFamily: 'Haltian Sans',
                        fontSize: 20,
                        fontWeight: FontWeight.bold),
                  ),
                  DropdownButtonHideUnderline(
                    child: DropdownButton(
                      isExpanded: true,
                      hint: Text(AppLocalizations.of(context).translate(
                          'activator_sensor_choose_installation_status')),
                      style: TextStyle(
                          fontSize: 18,
                          fontFamily: 'Haltian Sans',
                          color: HexColor("#000000"),
                          fontStyle:
                              FontStyle.normal), // Not necessary for Option 1
                      icon: Icon(
                        Icons.arrow_drop_down,
                        size: 35.0,
                        color: Colors.blue,
                      ),
                      value: installationStatus,
                      onChanged: (newValue) {
                        setState(() {
                          installationStatus = newValue;
                        });
                      },
                      items: _status.map((location) {
                        return DropdownMenuItem(
                          child: new Text(
                            location,
                            textAlign: TextAlign.left,
                            style: TextStyle(
                                fontFamily: 'Haltian Sans',
                                fontSize: 20,
                                color: HexColor("#000000"),
                                fontStyle: FontStyle.normal),
                          ),
                          value: location,
                        );
                      }).toList(),
                    ),
                  ),
                  _defineDescriptionWidget(),
                ]),
          ),
          Expanded(
            child: Column(
              children: <Widget>[
                _deviceMessages()
              ],
            ),
          ),
          Row(mainAxisAlignment: MainAxisAlignment.center, children: <Widget>[
            Padding(
              padding: EdgeInsets.fromLTRB(0, 10, 0, 40),
              child: ButtonTheme(
                minWidth: 300.0,
                child: TextButton(
                  style: getFlatButton(
                      Colors.white, HexColor("#1f87d8"), EdgeInsets.all(10.0)),
                  onPressed: () => {_saveDeviceStatus()},
                  child: Text(
                    AppLocalizations.of(context).translate('button_save'),
                    style: TextStyle(
                        fontFamily: 'Haltian Sans',
                        color: Colors.white,
                        fontSize: 20),
                  ),
                ),
              ),
            ),
          ]),
        ],
      );
    } else {
      return Container(
        color: HexColor("#ffffff"),
        constraints: BoxConstraints.expand(),
        child: Align(alignment: Alignment.center, child: _loadThingInfo()),
      );
    }
  }

  _defineDescriptionWidget() {
    return Column(
      children: <Widget>[
        SizedBox(
          height: 25.0,
        ),
        Row(
          children: <Widget>[
            SizedBox(
              height: 10.0,
            ),
            Text(
              AppLocalizations.of(context)
                  .translate('deployment_group_new_description'),
              textAlign: TextAlign.left,
              style: TextStyle(
                fontFamily: 'Haltian Sans',
                fontSize: 20,
                color: HexColor("#000000"),
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        Container(
          width: double.infinity,
          child: TextFormField(
            maxLength: 500,
            decoration: InputDecoration(counterText: ''),
            controller: controllerForDesc,
            style: TextStyle(
              fontFamily: 'Haltian Sans',
              fontSize: 20,
              color: HexColor("#000000"),
              fontStyle: FontStyle.normal,
            ),
          ),
        ),
      ],
    );
  }

  _deviceMessages() {
    return Expanded(
        child: Padding(
            padding: EdgeInsets.fromLTRB(20, 0, 0, 0),
            child: MessagesListView(messages)));
  }

  _loadThingInfo() {
    ThingseeNetworkAPIs.nwCheckDeviceInfoAndState(device.tuid)
        .then(_thingInfoLoaded);
  }

  _thingInfoLoaded(DeviceInfo deviceInfo) async {
    print(deviceInfo);
    if (deviceInfo.error.isEmpty) {
      device.battLvl = deviceInfo.battLvl;
      if (deviceInfo.battLvl.isEmpty) device.battLvl = "-";
      device.deviceType = getSensorType(deviceInfo.tuid);
      Map<String, dynamic> response = await ThingseeNetworkAPIs.nwGetDeviceMessages(deviceInfo.tuid, 50);
      _thingMessagesLoaded(deviceInfo, response);
    } else if (deviceInfo.error.contains("404")) {
      //Sensor not found from this stack
      Navigator.pop(context, null);
    } else {
      _somethingWentWrong();
    }
  }

  _popOutFromWidget() {
    Navigator.pop(context, false);
  }

  _thingMessagesLoaded(DeviceInfo deviceInfo, Map<String, dynamic> response) async {
    if (response["responseCode"] == 200) {
      messages = AutogeneratedMessageData.fromJson(response["responseBody"]);
      if (messages.messages.isNotEmpty) {
        device.hasMessages = true;
        DateTime date = new DateTime.fromMillisecondsSinceEpoch(messages.messages.first.tsmTs * 1000);
        if (date != null) device.messagesLatestTs = date.toLocal().toIso8601String();
      }
      device.messagesCheckedTs = new DateTime.now().toIso8601String();
    }
    _loadThingInstallationInfo(deviceInfo);
  }

  _loadThingInstallationInfo(DeviceInfo deviceInfo) {
    ThingseeNetworkAPIs.nwGetDeviceInstallationStatus(deviceInfo)
        .then(_thingInstallationInfoLoaded);
  }

  _thingInstallationInfoLoaded(DeviceInfo deviceInfo) {
    print(deviceInfo.toString());
    if (deviceInfo.error.isEmpty) {
      setState(() {
        if (deviceInfo.installationStatus == "installed") {
          installationStatus = AppLocalizations.of(context)
              .translate('activator_installation_status_installed');
        } else if (deviceInfo.installationStatus == "new") {
          installationStatus = AppLocalizations.of(context)
              .translate('activator_installation_status_new');
        } else if (deviceInfo.installationStatus == "quarantine") {
          installationStatus = AppLocalizations.of(context)
              .translate('activator_installation_status_quarantine');
        } else if (deviceInfo.installationStatus == "retired") {
          installationStatus = AppLocalizations.of(context)
              .translate('activator_installation_status_retired');
        } else {
          installationStatus = AppLocalizations.of(context)
              .translate('activator_installation_status_uninstalled');
        }
        _loaded = true;
        _loading = false;
      });
    } else if (deviceInfo.error.contains("404")) {
      //Sensor not found from this stack
      Navigator.pop(context, null);
    } else {
      _somethingWentWrong();
    }
  }

  _somethingWentWrong() {
    showSimpleQueryDialog(
        context,
        AppLocalizations.of(context).translate('error_title'),
        AppLocalizations.of(context)
            .translate('error_message_something_went_wrong'),
        AppLocalizations.of(context).translate('button_close'),
        _popOutFromWidget);
  }

  _saveDeviceStatus() async {
    String status = "installed";
    setState(() {
      if (installationStatus ==
          AppLocalizations.of(context)
              .translate('activator_installation_status_installed'))
        status = "installed";
      else if (installationStatus ==
          AppLocalizations.of(context)
              .translate('activator_installation_status_new'))
        status = "new";
      else if (installationStatus ==
          AppLocalizations.of(context)
              .translate('activator_installation_status_quarantine'))
        status = "quarantine";
      else if (installationStatus ==
          AppLocalizations.of(context)
              .translate('activator_installation_status_retired'))
        status = "retired";
      else if (installationStatus ==
          AppLocalizations.of(context)
              .translate('activator_installation_status_uninstalled'))
        status = "uninstalled";
      _loaded = true;
      _loading = true;
    });

    Map<String, dynamic> response =
        await ThingseeNetworkAPIs.nwSetDeviceDeploymentGroup(
            device.tuid, groupId);
    if (response["responseCode"] == 200) {
      var result = await ThingseeNetworkAPIs.nwSetDeviceInstallationStatus(
          device.tuid, status);
      print("Response code: " + result["responseCode"].toString());
      print(result);

      device.installationStatus = status;
      device.description = controllerForDesc.text;
      Navigator.pop(context, device);
    } else {
      setState(() {
        _loaded = true;
        _loading = false;
      });
      _somethingWentWrong();
    }
  }
}
